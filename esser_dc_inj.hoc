load_file("nrngui.hoc") 

create somaL23exc, somaL5exc

somaL23exc {
    nseg = 1
    diam = 1500
    L = 18.8
    Ra = 123.0
}

somaL5exc {
    nseg = 1
    diam = 1500
    L = 18.8
    Ra = 123.0
}

objectvar ess, ess1
somaL23exc ess = new esser_mech (0.5)
// parameters for L5exc 
ess.theta_eq = -53
ess.tau_theta = 2
// ess.tau_spike = 0.6/13
// ess.tau_m = 13/13
ess.tau_spike = 1.75/15
ess.tau_m = 1
ess.gNa_leak = 0.14
ess.gK_leak = 1.0
ess.tspike = 2.0
v_init = -75.263 //mV
somaL23exc{
    ena = 30
    ek = -90
  //  cm = tau_m
    cm = 15
}

somaL5exc ess1= new esser_mech (0.5)
// parameters for L5exc 
ess.theta_eq = -53
ess.tau_theta = 0.5
// ess.tau_spike = 0.6/13
// ess.tau_m = 13/13
ess.tau_spike = 0.6/13
ess.tau_m = 1
ess.gNa_leak = 0.14
ess.gK_leak = 1.3
ess.tspike = 0.75
v_init = -78.33 //mV
somaL5exc{
    ena = 30
    ek = -90
  //  cm = tau_m
    cm = 13
}
// create syn mechanism NMDA
// objref syn
// somaL23exc syn = new NMDA_esser (0.5)
// syn.tau_m = 13/13
// syn.gpeak = 1
// syn.tau1 = 4
// syn.tau2 = 40 
// syn.e = 0

// create syn mechanism AMPA
// objref syn
// somaL23exc syn = new Exp2Syn_esser (0.5)
// syn.tau_m = 13/13
// // syn.tau_m = 13
// syn.gpeak = 0.1
// syn.tau1 = 0.5
// syn.tau2 = 2.4 
// syn.e = 0


// create a NetStim and NetCon between Netstim and the cell
// thresh = 10
// del = 100
// wt = 1  
// objref nc, ns
// ns = new NetStim (0.5)
// ns.number = 1 
// ns.start = 0
// ns.noise = 0
// nc = new NetCon (ns,syn,thresh,del,wt)

// attach an Exp2Syn to the postsynaptic cell
// create syn mechanism AMPA
objref syn
somaL5exc syn = new Exp2Syn_esser (0.5)
syn.tau_m = 13/13
// syn.tau_m = 13
syn.gpeak = 0.1
syn.tau1 = 0.5
syn.tau2 = 2.4 
syn.e = 0

// create a NetCon that monitors the presynaptic cell for spikes and delivers events to the Exp2Syn.

objref nc
somaL23exc nc = new NetCon(&v(1), syn)
nc.weight = 2
nc.delay = 0.5

objectvar stim
somaL23exc stim = new IClamp(0.5)
stim.del = 0
stim.dur = 0.2  //ms
stim.amp = 3000 //nA

objref fih
fih = new FInitializeHandler("nc.event(50)")
// //record post synaptic current, conductance and potential
// objref ivec, gvec, vvec
// ivec = new Vector()
// gvec = new Vector()
// vvec = new Vector()
// ivec.record(&syn.i)
// gvec.record(&syn.g)
// vvec.record(&somaL23exc.v(0.5))

// objref saveim, saveg, savevm
// strdef synMech
//     synMech = "AMPA" // type of the synapse 
// proc save_data() {
//     // call procs to write coordinates, i_membrane, and areas
//     saveim=new File()
//     saveg=new File ()
//     savevm=new File()
    
//     strdef imem_fname, g_fname, vm_fname
//     sprint (imem_fname,"recording/imem_%s_diam_%g_L_%g_gpeak_%g_taum_%g.dat",synMech,somaL23exc.diam,somaL23exc.L,syn.gpeak,syn.tau_m)
//     sprint (g_fname,"recording/g_%s_diam_%g_L_%g_gpeak_%g_taum_%g.dat",synMech,somaL23exc.diam,somaL23exc.L,syn.gpeak,syn.tau_m)
//     sprint (vm_fname,"recording/vm_%s_diam_%g_L_%g_gpeak_%g_taum_%g.dat",synMech,somaL23exc.diam,somaL23exc.L,syn.gpeak,syn.tau_m)

//     saveim.wopen(imem_fname)
//     saveg.wopen(g_fname)
//     savevm.wopen(vm_fname)

//     ivec.printf (saveim, " %g") // save i_mem_matrix
//     gvec.printf (saveg)
//     vvec.printf(savevm)
//     saveim.close()
//     saveg.close()
//     savevm.close()
// }

tstop = 180
nrncontrolmenu()
run()